public class Solution
{
    public static int countStringsHelper(int[][][] memo, int m, int freqB, int freqC)
    {
        if (freqB > 1 || freqC > 2)
        {
            // Invalid string.
            return 0;
        }
        
        if (m == 0)
        {
            // Valid string generated.
            return 1;
        }
        
        if (freqB == 1 && freqC == 2)
        {
            // Only one string is possible i.e. string with all remaining characters as a.
            return 1;
        }

        // Check if sub-problem is already solved.
        if (memo[m][freqB][freqC] != -1)
        {
            // Return the stored result.
            return memo[m][freqB][freqC];
        }

        // One by one choosing 'a', 'b' and 'c' as the next character.
        int counter = countStringsHelper(memo, m - 1, freqB, freqC);
        counter = (counter % 1000000007 + countStringsHelper(memo, m - 1, freqB + 1, freqC) % 1000000007) % 1000000007;
        counter = (counter % 1000000007 + countStringsHelper(memo, m - 1, freqB, freqC + 1) % 1000000007) % 1000000007;

        // Store the result of the current sub-problem.
        memo[m][freqB][freqC] = counter;

        return counter;
    }

    public static int countStrings(int n)
    {
        int[][][] memo = new int[n + 1][2][3];

        for (int i = 0; i < n + 1; i++)
        {
            for (int j = 0; j < 2; j++)
            {
                for (int k = 0; k < 3; k++)
                {
                    memo[i][j][k] = -1;
                }
            }
        }

        return countStringsHelper(memo, n, 0, 0);
    } 
}

public class solution {

	// Return a string array that contains all the possible strings
	public static String[] keypad(int n){
		return helper("", n);
	}

	private static String[] helper(String p, int n) {

		if (n == 0) {

			return new String[] { p };
		}

		int r = n % 10;
		String arr = noMapping(r);
		String[] ans = {};
		for (int i = 0; i < arr.length(); i++) {
			String[] smallans = helper(arr.charAt(i) + p, n / 10);
			String[] ans1 = new String[ans.length];
			for (int j = 0; j < ans1.length; j++) {
				ans1[j] = ans[j];
			}
			ans = new String[ans1.length + smallans.length];
			int k = 0;
			while (k < ans1.length) {
				ans[k] = ans1[k];
				k++;
			}
			int z = 0;
			while (z < smallans.length) {
				ans[k] = smallans[z];
				k++;
				z++;
			}
		}

		return ans;
	}

	private static String noMapping(int n) {
		String s = "";
		switch (n) {
			case 0:
				s = "";
				break;
			case 1:
				s = "";
				break;
			case 2:
				s = "abc";
				break;
			case 3:
				s = "def";
				break;
			case 4:
				s = "ghi";
				break;
			case 5:
				s = "jkl";
				break;
			case 6:
				s = "mno";
				break;
			case 7:
				s = "pqrs";
				break;
			case 8:
				s = "tuv";
				break;
			case 9:
				s = "wxyz";
				break;
		}

		return s;
	}
}
